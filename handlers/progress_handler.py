from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from user_data.user_data_storage import (
    get_user_progress_for_periods,
    get_last_user_entry
)
from keyboards.progress_kb import progress_keyboard
from handlers.parameters_states import PROGRESS_MENU, PROGRESS_PARAM, PROGRESS_OVERALL
from handlers.inline_utils import clear_all_inlines, register_inline


UNITS = {
    'weight': '–∫–≥', 'hips': '—Å–º', 'thigh': '—Å–º',
    'waist': '—Å–º', 'chest': '—Å–º', 'biceps': '—Å–º'
}
PERIODS = ['–° –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è', '–ó–∞ –Ω–µ–¥–µ–ª—é', '–ó–∞ –º–µ—Å—è—Ü']

EMOJIS = {
    'weight': '‚öñÔ∏è',
    'hips': 'üçë',
    'thigh': 'ü¶µ',
    'waist': 'üîÑ',
    'chest': 'üéΩ',
    'biceps': 'üí™'
}


def pretty_param_name(p):
    names = {
        'weight': '–í–µ—Å',
        'hips': '–û–±—Ö–≤–∞—Ç —è–≥–æ–¥–∏—Ü',
        'thigh': '–û–±—Ö–≤–∞—Ç –±–µ–¥—Ä–∞',
        'waist': '–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏',
        'chest': '–û–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏',
        'biceps': '–û–±—Ö–≤–∞—Ç –±–∏—Ü–µ–ø—Å–∞'
    }
    return f'{EMOJIS[p]} {names[p]}'


def format_number(val, param):
    try:
        num = float(val)
        if num.is_integer():
            return str(int(num))
        if param == 'weight':
            return f'{num:.2f}'.rstrip('0').rstrip('.')
        else:
            return f'{num:.1f}'.rstrip('0').rstrip('.')
    except Exception:
        return val


def format_with_sign(val, param=None):
    try:
        num = float(val)
        formatted_val = format_number(num, param) if param else str(val)
        if num > 0:
            return f'+ {formatted_val}'
        if num < 0:
            return f'- {formatted_val.lstrip("-")}'
        return formatted_val
    except Exception:
        return val


def _format_progress_block(param, current, prog):
    def get_trend_emoji(change):
        try:
            val = float(change)
        except (TypeError, ValueError):
            return '‚è∏Ô∏è'
        if val > 0:
            return 'üîº'
        if val < 0:
            return 'üîΩ'
        return '‚è∏Ô∏è'

    unit = UNITS[param]
    trend_val = prog.get('–° –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è')
    if isinstance(trend_val, dict):
        trend_val = trend_val.get('value', '0')
    trend_emoji = get_trend_emoji(trend_val)
    current_str = f'{trend_emoji} {current} {unit}' if current != '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö' else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
    param_name_bold = f'<b>{pretty_param_name(param)}</b>'
    text = f'{param_name_bold}\n'
    text += f'–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{current_str}</b>\n'

    for per in PERIODS:
        v = prog.get(per)
        if isinstance(v, dict):
            suf = f" ({v['date']})" if v['date'] else ''
            val_str = format_with_sign(v['value'], param)
        else:
            suf = ''
            val_str = format_with_sign(v, param)
        try:
            float_val = float(val_str.replace('+', '').replace('-', '').replace(' ', ''))
            show_unit = True
        except Exception:
            show_unit = False
        text += f'‚Ä¢ {per}{suf}: {val_str}{" " + unit if show_unit else ""}\n'

    start_val = prog.get('–° –Ω–∞—á–∞–ª–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π')
    start_date = ''
    if isinstance(start_val, dict):
        val_str = format_with_sign(start_val['value'], param)
        if start_val.get('date'):
            start_date = f" ({start_val['date']})"
    else:
        val_str = format_with_sign(start_val, param)
    if start_val is not None and (not isinstance(start_val, dict) or start_val.get('value') != '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –Ω–∞—á–∞–ª–æ–º'):
        try:
            float_val = float(val_str.replace('+', '').replace('-', '').replace(' ', ''))
            show_unit = True
        except Exception:
            show_unit = False
        text += f'‚Ä¢ –° –Ω–∞—á–∞–ª–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π{start_date}: {val_str}{" " + unit if show_unit else ""}\n'
    return text


def show_progress_menu(update, context):
    clear_all_inlines(context)
    if update.callback_query:
        q = update.callback_query
        q.answer()
        q.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä:', reply_markup=progress_keyboard())
        register_inline(context, q.message.chat.id, q.message.message_id)
    else:
        msg = update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä:', reply_markup=progress_keyboard())
        register_inline(context, msg.chat.id, msg.message_id)
    return PROGRESS_MENU


def progress_for_param(update, context):
    clear_all_inlines(context)
    q = update.callback_query
    q.answer()
    param = q.data.replace('progress_', '')
    user_id = q.from_user.id

    prog = get_user_progress_for_periods(user_id, param)
    last_ent = get_last_user_entry(user_id) or {}
    current = last_ent.get(param, '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')

    text = _format_progress_block(param, current, prog)

    kb = [[InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='progress_menu')]]
    q.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kb), parse_mode='HTML')
    register_inline(context, q.message.chat.id, q.message.message_id)
    return PROGRESS_PARAM


def overall_progress(update, context):
    clear_all_inlines(context)
    q = update.callback_query
    q.answer()

    user_id = q.from_user.id
    text = '<b>üìä –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n\n'
    for p in UNITS:
        prog = get_user_progress_for_periods(user_id, p)
        last_ent = get_last_user_entry(user_id) or {}
        current = last_ent.get(p, '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
        text += _format_progress_block(p, current, prog) + '\n'

    kb = [[InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='progress_menu')]]
    q.edit_message_text(text, reply_markup=InlineKeyboardMarkup(kb), parse_mode='HTML')
    register_inline(context, q.message.chat.id, q.message.message_id)
    return PROGRESS_OVERALL


def progress_menu_callback(update, context):
    return show_progress_menu(update, context)
