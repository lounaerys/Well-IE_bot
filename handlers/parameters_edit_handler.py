from telegram import InlineKeyboardMarkup
from telegram.ext import ConversationHandler
from handlers.inline_utils import clear_all_inlines, register_inline
from keyboards.parameters_edit_kb import parameters_edit_keyboard
from keyboards.main_kb import main_keyboard
from user_data.user_data_storage import create_or_update_user, update_last_user_entry
from handlers.parameters_states import (
    EDIT_MENU, WEIGHT_EDIT, HIPS_EDIT, THIGH_EDIT,
    WAIST_EDIT, CHEST_EDIT, BICEPS_EDIT
)


def pretty_param_name(param):
    names = {
        'weight': '–í–µ—Å',
        'hips': '–û–±—ä–µ–º —è–≥–æ–¥–∏—Ü',
        'thigh': '–û–±—ä–µ–º –±–µ–¥—Ä–∞',
        'waist': '–û–±—ä–µ–º —Ç–∞–ª–∏–∏',
        'chest': '–û–±—ä–µ–º –≥—Ä—É–¥–∏',
        'biceps': '–û–±—ä–µ–º –±–∏—Ü–µ–ø—Å–∞'
    }
    return f'¬´{names[param]}¬ª'


def edit_parameters_menu(update, context):
    clear_all_inlines(context)
    if update.callback_query:
        q = update.callback_query
        q.answer()
        q.edit_message_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:',
            reply_markup=parameters_edit_keyboard()
        )
        register_inline(context, q.message.chat.id, q.message.message_id)
    else:
        msg = update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:',
            reply_markup=parameters_edit_keyboard()
        )
        register_inline(context, msg.chat.id, msg.message_id)
    context.user_data['editing_param'] = True
    return EDIT_MENU


def edit_parameter(update, context):
    q = update.callback_query
    q.answer()
    param = q.data.replace('edit_', '')
    context.user_data['edit_param'] = param
    q.edit_message_text(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {pretty_param_name(param)}:')
    return {
        'weight': WEIGHT_EDIT,
        'hips': HIPS_EDIT,
        'thigh': THIGH_EDIT,
        'waist': WAIST_EDIT,
        'chest': CHEST_EDIT,
        'biceps': BICEPS_EDIT
    }[param]


def handle_edit(update, context, param):
    from handlers.parameters_main_handler import text_message_handler

    text = update.message.text
    if text in [
        'üìã –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
        '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
        '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
        'üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å',
        'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ'
    ]:
        clear_all_inlines(context)
        update.message.reply_text(
            '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–æ, –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.',
            reply_markup=main_keyboard()
        )
        return text_message_handler(update, context)

    try:
        value = int(text)
    except ValueError:
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.')
        state_name = f'{param.upper()}_EDIT'
        return globals().get(state_name, ConversationHandler.END)

    user_id = update.message.from_user.id
    create_or_update_user(user_id, **{param: value})
    update_last_user_entry(user_id, **{param: value})
    clear_all_inlines(context)
    update.message.reply_text(f'{pretty_param_name(param)} –æ–±–Ω–æ–≤–ª–µ–Ω.', reply_markup=main_keyboard())
    context.user_data.pop('editing_param', None)
    context.user_data.pop('edit_param', None)
    return ConversationHandler.END


def handle_weight_edit(update, context):
    return handle_edit(update, context, 'weight')


def handle_hips_edit(update, context):
    return handle_edit(update, context, 'hips')


def handle_thigh_edit(update, context):
    return handle_edit(update, context, 'thigh')


def handle_waist_edit(update, context):
    return handle_edit(update, context, 'waist')


def handle_chest_edit(update, context):
    return handle_edit(update, context, 'chest')


def handle_biceps_edit(update, context):
    return handle_edit(update, context, 'biceps')
